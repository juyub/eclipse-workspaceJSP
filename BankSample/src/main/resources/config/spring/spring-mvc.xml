<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:context="http://www.springframework.org/schema/context"	
    xmlns:tx="http://www.springframework.org/schema/tx"	
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:task="http://www.springframework.org/schema/task"
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd" >


	<!-- 자동으로 빈으로 사용 될 객체를 등록. -->
	<context:component-scan base-package="kr.ac.kopo" />
	
	
	
	
	 <!-- @ResponseBody 호출 시 한글 인코딩 처리 -->
    <mvc:annotation-driven >	                       
		<mvc:message-converters>
			
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/html; charset=UTF-8</value>
						<value>application/json; charset=UTF-8</value>
					</list>
				</property>
			</bean>
			
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
         		<property name="supportedMediaTypes">
					<list>
						<value>text/html; charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	
	
	
	
	
	<!-- 최대 업로드 파일 사이즈 : 10MB -->
	<bean id="multipartResolver" class= "org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10485760" />
	</bean>
	
		
		
		
		
	<!-- DB연결 -->
	
	<!-- dataSource 설정 -->	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	      
	      <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
	      <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />	
	      <property name="username" value = "jaehee" />
	      <property name="password" value = "1111" />
	 </bean>
	 
	 <!-- sqlSession 만들기 -->
	 <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	 	<property name="dataSource" ref="dataSource" />			
	 	<property name="configLocation" value="classpath:config/mybatis/sqlMapConfig.xml" />	<!-- sqlMapConfig -->
	 	<property name="mapperLocations" value="classpath:config/sqlmap/oracle/*.xml" />        <!-- Mapper 모든 맵퍼 들어오게 *.xml -->
	 </bean>
	 
	 <!-- sqlSessionFactory 보다 더 다양한 기능 하진 sqlSessionTemplate사용.(자동 트랜잭션 등)  -->
	 <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	 
	
	
	
	
	
	<!-- 포워딩 시킬 jsp주소 간단하게 쓰기위해 fix 값을 제외한 주소만 쓰게 해줌  -->
	<mvc:default-servlet-handler />                    
	<mvc:view-resolvers>                                
		<mvc:jsp prefix="/WEB-INF/jsp/" suffix=".jsp" />	<!-- WEB-INF밑에 있으므로 외부에서 절대 접근 못함. 보안폴더이므로...  -->
	</mvc:view-resolvers>
	
	
	
	
	
	<!-- 컨트롤러 없이 페이지 매핑. 그냥 포워드만 해주는 경우  -->

	<!-- 계좌 개설 페이지 -->
	<mvc:view-controller path="/product" view-name="accountProduct/product"/>
	<mvc:view-controller path="/product/depositFreeChoose" view-name="accountProduct/depositFreeChoose"/>
	<mvc:view-controller path="/product/depositFreeExplain1" view-name="accountProduct/depositFreeExplain1"/>
	<mvc:view-controller path="/product/depositFreeExplain2" view-name="accountProduct/depositFreeExplain2"/>
	<mvc:view-controller path="/product/depositFreeExplain3" view-name="accountProduct/depositFreeExplain3"/>
	
	<mvc:view-controller path="/product/savingsChoose" view-name="accountProduct/savingsChoose"/>
	<mvc:view-controller path="/product/savingsExplain1" view-name="accountProduct/savingsExplain1"/>
	<mvc:view-controller path="/product/savingsExplain2" view-name="accountProduct/savingsExplain2"/>
	<mvc:view-controller path="/product/savingsExplain3" view-name="accountProduct/savingsExplain3"/>
	
	<mvc:view-controller path="/friend" view-name="friend/friend"/>
	
	
	
	
   <!-- 인터셉터와 빈으로 등록 -->
   <bean class="kr.ac.kopo.interceptor.LoginInterceptor" id="loginInterceptor"/>
   <mvc:interceptors>
      <mvc:interceptor>
         <!-- <mvc:mapping path="/board/write"/> --><!-- 어떤 uri가 들어올 때 loginInterceptor가 작동하도록 만들겠다. 만약 path="/board/write"하면 board에 글 작성할 때! -->
         <mvc:mapping path="/**/" />   <!-- /가 나오고 그 뒤에 depth가 몇이던간에 (/board, /board/write, /member, /member/update) 전부 막기 -> 근데 이렇게하면 무조건 에러생김 -->
         <!-- 위에서 한거처럼 모든 depth는 거쳐가는데 login은 안거칠거야(머 호출되는거 없이 그냥 실행될거야)(uri직접입력시) -->
         <mvc:exclude-mapping path="/login"/>
         <mvc:exclude-mapping path="/logout"/>
         <mvc:exclude-mapping path="/join"/>
         <mvc:exclude-mapping path="/idCheck/**"/>
         <mvc:exclude-mapping path="/board"/> <!-- 게시판 목록은 그냥 보여줄거야 -->
         <mvc:exclude-mapping path="/resources/**"/>  <!-- /resources아래에 있는 모든 폴더도 그냥 보여줄거야 -->
         <mvc:exclude-mapping path="/card"/>
        
       
         <ref bean="loginInterceptor" />
      </mvc:interceptor>
   </mvc:interceptors>
	
	
	<!--트랜잭션 처리  -->
	<bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	
	<!-- 스케쥴러 처리 -->
	<!-- 스케쥴러파일이 존재한느 패키지 설정 -->
	<context:component-scan base-package="kr.ac.kopo.transfer.controller" />
		<!-- 해당 태그들은 크론탭 설정에 필요한 태그들 -->
		<task:scheduler id="jobScheduler" pool-size="10"/>
		<task:annotation-driven scheduler="jobScheduler"/>
		
		
	<!-- Gmail -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
	    <property name="host" value="smtp.gmail.com" />
	    <property name="port" value="587" />
	    <property name="username" value="hanati123123@gmail.com" />
	    <property name="password" value="gmrdls1541" />
	    <property name="javaMailProperties">
	    <props>
	      <prop key="mail.smtp.auth">true</prop>
	      <prop key="mail.smtp.starttls.enable">true</prop>
	      <prop key="mail.smtp.ssl.trust">smtp.gmail.com</prop>
	    </props>
	    </property>
    </bean>
	
</beans>