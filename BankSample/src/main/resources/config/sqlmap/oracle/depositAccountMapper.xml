<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="account.dao.DepositAccountDAO">

	<resultMap type="depositAccountVO" id="depositAccountMap">
  		<result column="account_number" property="accountNumber" />
  		<result column="account_password" property="accountPassword" />
  		<result column="bank_book_key" property="bankBookKey" />
  		<result column="nick_name" property="nickName" />
  		<result column="reg_date" property="regDate" />
  		<result column="main_account" property="mainAccount" />
  	</resultMap>

	<resultMap type="string" id="depositAccountNumString">
		<result column="account_number" property="accountNumber" />
	</resultMap>

	<!-- 입출금 계좌 정보 -->
  	<select id="selectById" resultMap="depositAccountMap" parameterType="String">
  		select d.account_number, d.id, d.account_password, d.balance, b.value as bank_book_key, 
  			   d.nick_name, to_char(d.reg_date, 'YYYY"년 "MM"월 "DD"일"') as reg_date, d.main_account
  		 from dw_account d left join bank_book b
  		 		on d.bank_book_key = b.key
  		 where id = #{id} 
  		 order by main_account desc
  	</select>
  	
  	<!-- 입출금 계좌 총 잔액 -->
  	<select id="totalBalanceById" resultType="int" parameterType="String">
  		select sum(balance) 
		 from dw_account
		 where id = #{id}
  	</select>
  	
  	<!-- 입출금 자유 예금 계좌 번호  -->
  	<select id="accountNumListById" parameterType="String" resultMap="depositAccountNumString">
  		select account_number
  		 from dw_account
  		 where id = #{id}
  	</select>
  	
  	<!-- 입출금 자유 예금 상품 가입 -->
  	<insert id="insert" parameterType="depositAccountVO">
  		insert into dw_account(account_number, 
  		                       id, account_password, balance, bank_book_key, nick_name, main_account)
  		                values(substr(seq_account_number.nextval,1,3) || '-' || substr(seq_account_number.currval,4,6) || '-' || substr(seq_account_number.currval,10,5),
  		                       #{id}, #{accountPassword}, #{balance}, #{bankBookKey}, #{nickName}, 'N')
  	</insert>
  	
  	<!-- 해당 계좌 정보 가져오기 -->
  	<select id="getInfo" resultMap="depositAccountMap" parameterType="String">
  		select d.account_number, d.id, d.account_password, d.balance, b.value as bank_book_key, 
  			   d.nick_name, to_char(d.reg_date, 'YYYY"년 "MM"월 "DD"일"') as reg_date, d.main_account
  		 from dw_account d left join bank_book b
  		 		on d.bank_book_key = b.key
  		 where account_number = #{accountNumber} 
  	</select>
  	
  	
  	
  	
  	<!-- 사용자의 기존 메인 계좌를 서브계좌로 만들기(계좌 상태 sub으로 초기화) -->
  	<update id="mainToSub" parameterType="String">
  		update dw_account
  		 set
  			main_account = 'N'
  		 where id = #{id}
  	</update>
  	
  	<!-- 해당 계좌 정보 수정 -->
  	<update id="update" parameterType="depositAccountVO">
  		update dw_account
  		 set 
  			main_account = #{mainAccount},
  			nick_name = #{nickName}
  		 where account_number = #{accountNumber}	
  	</update>
  	
  	<!-- 메인 계좌번호 가져오기 -->
  	<select id="getMainAccountNumber" resultType="String" parameterType="String">
  		select account_number 
  		 from dw_account
  		 where main_account = 'Y' and
  		       id = #{id} 		      
  	</select>
  	
  	<!-- 계좌 삭제 -->
  	<delete id="deleteDepositAccount" parameterType="String">
  		delete from dw_account
  		 where account_number = #{accountNumber}
  	</delete>
  	
  	

  	
</mapper>